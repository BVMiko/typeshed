from _typeshed import Incomplete

from authlib.common.urls import urlparse as urlparse
from authlib.consts import default_json_headers

from ..requests import OAuth2Request

class BaseGrant:
    TOKEN_ENDPOINT_AUTH_METHODS: Incomplete
    GRANT_TYPE: Incomplete
    TOKEN_RESPONSE_HEADER = default_json_headers
    prompt: Incomplete
    redirect_uri: Incomplete
    request: Incomplete
    server: Incomplete
    def __init__(self, request: OAuth2Request, server) -> None: ...
    @property
    def client(self): ...
    def generate_token(
        self,
        user: Incomplete | None = None,
        scope: Incomplete | None = None,
        grant_type: Incomplete | None = None,
        expires_in: Incomplete | None = None,
        include_refresh_token: bool = True,
    ): ...
    def authenticate_token_endpoint_client(self): ...
    def save_token(self, token): ...
    def validate_requested_scope(self): ...
    def register_hook(self, hook_type, hook) -> None: ...
    def execute_hook(self, hook_type, *args, **kwargs) -> None: ...

class TokenEndpointMixin:
    TOKEN_ENDPOINT_HTTP_METHODS: Incomplete
    GRANT_TYPE: Incomplete
    @classmethod
    def check_token_endpoint(cls, request: OAuth2Request): ...
    def validate_token_request(self) -> None: ...
    def create_token_response(self) -> None: ...

class AuthorizationEndpointMixin:
    RESPONSE_TYPES: Incomplete
    ERROR_RESPONSE_FRAGMENT: bool
    @classmethod
    def check_authorization_endpoint(cls, request: OAuth2Request): ...
    @staticmethod
    def validate_authorization_redirect_uri(request: OAuth2Request, client): ...
    @staticmethod
    def validate_no_multiple_request_parameter(request: OAuth2Request): ...
    redirect_uri: Incomplete
    def validate_consent_request(self) -> None: ...
    def validate_authorization_request(self) -> None: ...
    def create_authorization_response(self, redirect_uri: str, grant_user): ...
